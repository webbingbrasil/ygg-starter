"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-01-01 13:00:00`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

type Query {
    me: User @auth @middleware(checks: ["auth"])
    users: [User!]! @paginate @middleware(checks: ["auth"])
    user(id: ID @eq): User @find @middleware(checks: ["auth"])
}

type User {
    id: ID!
    name: String!
    email: String!
    created_at: DateTime!
    updated_at: DateTime!
}

type Token {
    access_token: String!
    token_type: String!
    expires_in: Int!
}

type Mutation {
    login(
        email: String! @rules(apply: ["email"])
        password: String! @rules(apply: ["required"])
    ): Token @field(resolver: "AuthMutator@resolve")
    refreshToken: Token @field(resolver: "AuthMutator@refresh")
    sendPasswordReset(
        email: String! @rules(apply: ["email"])
    ): Boolean @field(resolver: "PasswordRecoveryMutator@request")
}

extend type Mutation @middleware(checks: ["auth"]){
    logout: Boolean @field(resolver: "AuthMutator@logout")
    createUser(
        name: String!
        email: String! @rules(apply: ["email", "unique:users"])
        password: String! @bcrypt @rules(apply: ["min:6"])
    ): User @create
    updateUser(
        id: ID!
        name: String
        email: String @rules(apply: ["email", "unique:users"])
        password: String @bcrypt @rules(apply: ["min:6"])
    ): User @update
    deleteUser(id: ID!): User @delete
}
